import sys
import argparse
import json

import tweepy

import zend.tweeter
import zend.tweetgen

def usage(in_args):
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(
        title="commands",
        description="valid commands",
    )
    auth_parser = subparsers.add_parser("auth")
    auth_parser.add_argument("--open_browser", "-o", action="store_true", help="Open the browser for you")
    auth_parser.add_argument("consumer_token", help="Twitter Consumer Token")
    auth_parser.add_argument("consumer_secret", help="Twitter Consumer Secret")
    auth_parser.add_argument("device_id", help="SparkIO Device ID")
    auth_parser.add_argument("device_token", help="Access token for SparkIO device")

    daemon_parser = subparsers.add_parser("daemon")
    daemon_parser.add_argument("auth_file", help="JSON file containing auth information generated by auth command")

    return parser.parse_args(in_args)

def handle_auth(consumer_token, consumer_secret, with_browser, device_id, device_token):
    auth = tweepy.OAuthHandler(consumer_token, consumer_secret)
    redirect_url = auth.get_authorization_url()
    if with_browser:
        import webbrowser

        webbrowser.open(redirect_url)
    else:
        print("Please go to the following url and authorize the app: ")
        print("\t{0}".format(redirect_url))
        print()

    verifier = raw_input("Authorization Verifier Code: ")
    auth.get_access_token(verifier)

    # Write authorization file
    data = {
        'consumer_token': consumer_token,
        'consumer_secret': consumer_secret,
        'access_key': auth.access_token.key,
        'access_secret': auth.access_token.secret,
        'device_id': device_id,
        'device_token': device_token
    }
    with open("zend.auth.json", "w") as f:
        json.dump(data, f)

    print("Access Tokens successfully written to zend.auth.json")

def handle_daemon(data):

    gen = zend.tweetgen.Generator()
    data['gen_method'] = gen

    daemon = zend.tweeter.Tweeter(**data)
    daemon()

def main(args=sys.argv[1:]):
    args = usage(args)

    if hasattr(args, 'auth_file'):
        with open(args.auth_file, "r") as f:
            data = json.load(f)
            handle_daemon(data)
    else:
        handle_auth(args.consumer_token, args.consumer_secret, args.open_browser, args.device_id, args.device_token)

if __name__=="__main__":
    main()
